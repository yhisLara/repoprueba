Git-Github

1. Existen 3 areas (Arquitectura de árbol)
  - Área de trabajo(sublime)
  - Área de Preparación (staging area)
  - Repositorio (Github)

2. Primeras configuraciones (usuario y email)
  - Abrir terminal git bash,ejecutar:
    * git config --global user.name "name"
    * git config --global user.email "email"
    * git config --global color.ui true
  
3. Inicializando con Git
  - Dirigirse a la carpeta del proyecto en consola y ejecutar "git init"

4. Otros Comandos
  - git status : Muestra el estado del proyecto, archivos modificados y archivos en el staging area.
  - git add -A : Guarda los archivos enviandolos al staging area.
      * git add -A
      * git add *
      * git add .
      * git add [nombre_archivo]
      
  - git commit -m "mensaje" : sube el archivo al repositorio central (Github).
      * git commit -am "mensaje" : comandos conjuntos para agregar y subir al repositorio.
      
  - git log : muestra el historial de commit
      * git log > commits.txt : genera un archivo txt con los commits realizados en el proyecto.
      * git log --oneline --decorate --graph --all : muestra los commits con colores y en forma de grafo.
      * git config --global alias.[nombre_alias] 'log --oneline --decorate --graph -- all' : ingresa un alias para llamar al log
          *git nicelog
      
  - git checkout : permite revisar el proyecto en un estado anterior especifico, o cambiarse de rama.
      * git checkout [id_del_commit]
      * git checkout [nombre_rama]
      
  - git reset : permite volver a una versión anterior del proyecto sin poder recuperar.
      * git reset --soft : borra una versión pero mantiene el ultimo codigo en el editor.
      * git reset --mixed : borra la versión y lo de staging area, no lo del editor.
      * git reset --hard : borra todo.
      
  *** Sólo si se guardo un txt con los commits realizados en el proyecto se puede recuperar lo borrado
        * git reset --hard [id_del_commits]

5. Ramas (Branch)
  - Lineas alternas de tiempo.Se realiza una copia del proyecto que se encuentra en la rama master-
  - no afecta la versión estable del proyecto guardada en la rama Master.
  - HEAD : Punto del proyecto donde nos encontramos(Que rama)
  - git branch [nombre_rama] : comando que crea una nueva rama.
  - git branch : muestra las ramas existentes
  - git branch -v :
  - git branch -d : elimina una rama. solo si la rama fue fusionada
  - git branch -D : elimina la rama incluso si no ha sido fusionada
  - git branch -m : renombra una rama cuando estas posicionado en ella.
  - git branch --merged : muestra las ramas que han sido fusionadas.

6. Fusiones (merge) 
  - comando que realiza al fusión de ramas.
      * git merge [nombre_rama]
  - para crear un mensaje para la fusión, presionar "o".
  - para salir del texto ,ESC :X.
  - cuando se fusiona sin conflicto aparece fast-forward
  - cuando no se fusiona aparece el error CONFLICT que debe ser resulto manualmente
      en el archivo aparecera:
                              <<<<<<<<< HEAD
                              ==========
                              >>>>>>>>> [nombre_rama]
      seleccionar la porción de código a guardar, commit y add normal.

7. Github
  - Workflows : flujos de trabajos en github.
  - git clone [https or ssh] : permite clonar un repositorio de github al repositorio local
  - git remote : enlaza servidores con areas locales, en este caso github con el area local.
      * git remote add origin [copy_url_repository_github]
      * git remote -v : enlaces generados via repositorio
  - git push : permite subir los commit y archivos desde local al repositorio
      * git push origin master : por defecto
  - git fetch : espejea la rama master del repositorio github con la rama origin/master del repositorio local.
  - git pull : realiza el espejeo y fusion del repositorio central con el repositorio local.
  
  - origin y upstream : 
  
    /-------------------/   fork    /------------------/
    / proyecto ajeno    / ========> / proyecto clonado /
    /___________________/           /__________________/
            |                                 |
      upstream/master   ------------>   origin/master (local)
      
8. Deployment 
  - subir el proyecto a una url.
  - tiene 4 areas:
      *Desarrollo (local)
      *Produccion
      *Testing (server para genarar pruebas)
      *staging
  - github pages : generar una url de produccion
      - se puede generar un nuevo branch en github llamado gh-pages(deployment  automático)
      - se genera un commit dentro de la rama gh-pages recién creada y se muestra "web site"
          * url generada : "www.nombreusuario.github.io/nombre_del_proyecto"
  - ssh : Protocolo de seguridad.
      *ssh-keygen: se  genera una clave de seguridad en local
          /users/""/.ssh/id_rsa
          - id_rsa = llave privada
          - id_rsa.pub = llave publica
      - Ingresar a la carpeta ssh con el comando cat id_rsa.pub y copiar
      - Ingresar a github y en settings aparece " ssh and gpgkeys" y crear la nueva llave.
      - Luego se realiza la conexión via ssh al proyecto.
          * git init, git remote , git pull ,pregunta la pass , git pull origin gh-pages.
      - Para que los cambios se vean reflejados en la url, deben ser en gh-pages.
      
9. Shell script
  - Se crea archivo sh con instrucciones git para ahorrar tiempo.
  - #!/bin/sh ( interprete), touch , git add ,git commit , git status , echo , etc
  - sh [nombre_archivo.sh] : permite ejeecutar el shell script.

10. git hooks 
  - Archivo sh con instrucciones pero que se ejecuta automaticamente como un trigger.
  - Entrar en la carpeta cd .git/hooks  del proyecto, ejecutar ls para ver los hooks que existen y crear el nuevo hook
    touch [nombre_hooks]
  - se edita con vim [nombre_hooks]. Se agregan las instrucciones #!/bin/sh  ./git push origin master.
  - con cat [nombre_hook] se lee el archivo y se autoriza para que se pueda ejecutar con CHMOD +X [nombre_hooks]
  
11. Manual Deployment
  - Dar acceso via ssh por terminal al servidor
  - Generar llave ssh en el servidor (ssh-keygen) , id_rsa ,etc.
  - Copiar id_rsa.pub del servidor y crear nueva llave en github para generar la conexión entre github y el server(webfaction).
  - Ejecutar git init , git remote con el repositorio de github, git pull (pide la pass).
  - Desde local ...
      - generar cambio
      - git add -A
      - git commit -m ""
      - git push origin master  / cambios en github
      
  - desde webserver...
      - git pull origin master
      - ingresar pass
  
12. Gestión de proyectos
  - Wiki :  texto de colaboración
  - issue : se activan en features en settings
            "Tareas" a realizar del proyecto. Se le asigna un nombre, un encargado, selecciona un label, descripción y
            puede ser asignado a un milestone (un proceso grande del proyecto)
  - Milestone : Titulo, Descripción y fecha. un evento mayor del proyecto que puede contener issues.
      - Confirmar un issue :
        - Entrar a commits y seleccionar el que se desea confirmar.
        - Click en el cliboard y se visualizael cambio efectuado.
        - se puede realizar de dos formas:
          - copiando la url del commit
          - copiando el numero sha
        - Pegarlo como comentario dentro del issue.clicj en close and comment.
        
13. Automatic Deployment
  - Se utilizan hooks
  - .git ignore : archivo escondido. 
                  #!/bin/sh
                  *.sh ( archivos a ignorar)
                  
  - touch deploy.sh : crearlo en carpeta del proyecto
                      #!/bin/sh
                      cd ~/webapps/"nombre_proyecto"
                      git init, git remote, git pull
                      
  - hooks post-commit : #!/bin/sh
                        git push origin master
                        ssh [conexion_con_webserver] 'bash-s' < deploy.sh
                        
  - autorizar post-commit : chmod +x post-commit
                



